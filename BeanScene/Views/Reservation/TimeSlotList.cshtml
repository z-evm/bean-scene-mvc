@{
    ViewBag.Title = "Available Time Slots";
    var timeSlots = ViewBag.TimeSlots as List<(DateTime SlotStart, bool IsAvailable)>;
    int sittingId = ViewBag.SittingId ?? 0;
    int guests = ViewBag.Guests ?? 0;
}

<h2 class="text-center my-4">Available Time Slots</h2>

<p class="text-center text-muted">
    Select an available time slot to proceed with your reservation.
</p>

@if (timeSlots != null && timeSlots.Any())
{
    <form method="get" action="@Url.Action("Book", "Reservation")">
        @Html.AntiForgeryToken()

        <!-- Include SittingId and Guests as hidden fields -->
        <input type="hidden" name="sittingId" value="@sittingId" />
        <input type="hidden" name="guests" value="@guests" />

        <div class="time-slot-grid">
            @foreach (var slot in timeSlots)
            {
                <button 
                    type="submit" 
                    name="selectedTimeSlot" 
                    value="@slot.SlotStart.ToString("yyyy-MM-ddTHH:mm:ss")" 
                    class="time-slot-box @(slot.IsAvailable ? "available" : "unavailable")" 
                    @(slot.IsAvailable ? "" : "disabled")
                    title="@(slot.IsAvailable ? "Click to select this time slot" : "This time slot is unavailable")"
                    aria-disabled="@(slot.IsAvailable ? "false" : "true")">
                    @slot.SlotStart.ToString("HH:mm")
                </button>
            }
        </div>
    </form>
}
else
{
    <p class="text-center text-danger">No time slots available for the specified range.</p>
}

<style>
    /* Container for time slots */
    .time-slot-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
        gap: 15px;
        margin-top: 20px;
    }

    /* Time slot button styles */
    .time-slot-box {
        display: inline-block;
        width: 100%;
        height: 60px;
        background-color: #f8f9fa;
        color: #333;
        text-align: center;
        line-height: 60px;
        font-size: 16px;
        font-weight: bold;
        border: 2px solid transparent;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    /* Available slot styles */
    .time-slot-box.available {
        background-color: #4AA1B5;
        color: white;
        border: 2px solid #4AA1B5;
    }

    .time-slot-box.available:hover,
    .time-slot-box.available:focus {
        background-color: #378a97;
        border-color: #2d7281;
        box-shadow: 0 4px 8px rgba(74, 161, 181, 0.3);
    }

    /* Unavailable slot styles */
    .time-slot-box.unavailable {
        background-color: #e0e0e0;
        color: #999;
        cursor: not-allowed;
        border: 2px solid #ccc;
    }

    .time-slot-box.unavailable:hover {
        background-color: #e0e0e0; /* Keep same color on hover */
        border-color: #ccc;
    }

    /* Disabled slots */
    .time-slot-box:disabled {
        pointer-events: none;
        opacity: 0.6;
    }

    /* Selected slot */
    .time-slot-box.selected {
        background-color: #ffc107;
        color: #333;
        border-color: #ffca2c;
    }

    /* Responsive text alignment */
    .text-center {
        text-align: center;
    }

    /* Responsive spacing */
    .my-4 {
        margin-top: 1.5rem;
        margin-bottom: 1.5rem;
    }

    /* Button hover effect */
    button:focus {
        outline: none;
    }
</style>


